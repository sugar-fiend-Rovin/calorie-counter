{"version":3,"sources":["Food-Query.js","context/auth.js","components/journal.jsx","components/login.jsx","components/register.jsx","components/home.jsx","components/button.jsx","util/DynamicRoute.js","components/setGoal.jsx","App.js","serviceWorker.js","index.js"],"names":["gql","UserQuery","SetGoals","REGISTER_USER","LOGIN_USER","AuthStateContext","createContext","AuthDispatchContext","user","token","localStorage","getItem","decodedToken","jwtDecode","expiresAt","Date","exp","removeItem","console","log","authReducer","state","action","type","setItem","payload","Error","AuthProvider","children","useReducer","dispatch","Provider","value","useAuthDispatch","useContext","Journal","Register","props","useState","username","password","variables","setVariables","errors","setErrors","useLazyQuery","onError","err","graphQLErrors","extensions","onCompleted","data","login","history","push","loginUser","loading","Row","className","Col","sm","md","lg","Form","onSubmit","e","preventDefault","Group","Label","Control","onChange","target","Button","variant","disabled","to","email","confirmPassword","useMutation","update","_","__","registerUser","React","Example","DynamicRoute","authenticated","guest","component","yup","age","required","sex","height","heightTens","weight","goal","activityLevel","SetG","c","f","p","k","stats","setStats","refetchQueries","query","setGoal","noValidate","a","s","h","t","w","g","act","calories","Math","round","carbs","fats","protons","formula","protein","kcal","name","parseInt","isInvalid","Feedback","as","selected","placeholder","style","color","App","Container","exact","path","Login","Boolean","window","location","hostname","match","httpLink","createHttpLink","uri","authLink","setContext","headers","authentication","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.65b1c149.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\nconst FoodQueryS = gql`\r\n  query($name: String!) {\r\n    getFood(food_name: $name) {\r\n      food_name\r\n      type\r\n      calories\r\n      carbohydrates\r\n      proteins\r\n      fats\r\n    }\r\n  }\r\n`;\r\nconst UserQuery = gql`\r\n  query {\r\n    getUser {\r\n      id\r\n      email\r\n      username\r\n      daily_calories\r\n      carbohydrates\r\n      proteins\r\n      fats\r\n    }\r\n  }\r\n`;\r\nconst EntryQuery = gql`\r\n  query($date: String!) {\r\n    getEntries(date: $date) {\r\n      username\r\n      food_entry\r\n      date\r\n      quantity\r\n      food_en {\r\n        food_name\r\n        type\r\n        calories\r\n        carbohydrates\r\n        proteins\r\n        fats\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst FoodQuery = gql`\r\n  query {\r\n    getFoods {\r\n      food_name\r\n      type\r\n      calories\r\n      carbohydrates\r\n      proteins\r\n      fats\r\n    }\r\n  }\r\n`;\r\n// const EntryQueryS = gql`\r\n//   query($name: String!) {\r\n//     getEntry(food_entry: $name) {\r\n//       food_entry\r\n//       date\r\n//       quantity\r\n//       food_en {\r\n//         food_name\r\n//         type\r\n//         calories\r\n//         carbohydrates\r\n//         proteins\r\n//         fats\r\n//       }\r\n//     }\r\n//   }\r\n// `;\r\nconst AddFood = gql`\r\n  mutation(\r\n    $food_name: String!\r\n    $type: String!\r\n    $calories: Float!\r\n    $carbohydrates: Float!\r\n    $proteins: Float!\r\n    $fats: Float!\r\n  ) {\r\n    addFood(\r\n      food_name: $food_name\r\n      type: $type\r\n      calories: $calories\r\n      carbohydrates: $carbohydrates\r\n      proteins: $proteins\r\n      fats: $fats\r\n    ) {\r\n      food_name\r\n      type\r\n      calories\r\n      carbohydrates\r\n      proteins\r\n      fats\r\n    }\r\n  }\r\n`;\r\nconst AddEntry = gql`\r\n  mutation($food_entry: String!, $date: String!, $quantity: Float!) {\r\n    createEntry(food_entry: $food_entry, date: $date, quantity: $quantity) {\r\n      food_entry\r\n      date\r\n      quantity\r\n    }\r\n  }\r\n`;\r\nconst AddUser = gql`\r\n  mutation($name: String!) {\r\n    addUser(username: $name) {\r\n      username\r\n    }\r\n  }\r\n`;\r\nconst DeleteEntry = gql`\r\n  mutation($food_entry: String!, $date: String!) {\r\n    deleteEntry(food_entry: $food_entry, date: $date)\r\n  }\r\n`;\r\nconst AddQuantity = gql`\r\n  mutation($food_entry: String!, $date: String!) {\r\n    updateEntryPlus(food_entry: $food_entry, date: $date) {\r\n      food_entry\r\n      date\r\n      quantity\r\n    }\r\n  }\r\n`;\r\n\r\nconst MinusQuantity = gql`\r\n  mutation($food_entry: String!, $date: String!) {\r\n    updateEntryMinus(food_entry: $food_entry, date: $date) {\r\n      food_entry\r\n      date\r\n      quantity\r\n    }\r\n  }\r\n`;\r\n// const LOGIN_USER = gql`\r\n//   mutation login($username: String!, $password: String!) {\r\n//     login(username: $username, password: $password) {\r\n//       id\r\n//       email\r\n//       username\r\n//       token\r\n//     }\r\n//   }\r\n// `;\r\nconst SetGoals = gql`\r\n  mutation($carbs: Float!, $fats: Float!, $protein: Float!, $kcal: Float!) {\r\n    updateUserGoals(\r\n      carbs: $carbs\r\n      fats: $fats\r\n      protein: $protein\r\n      kcal: $kcal\r\n    ) {\r\n      daily_calories\r\n      carbohydrates\r\n      proteins\r\n      fats\r\n    }\r\n  }\r\n`;\r\nconst REGISTER_USER = gql`\r\n  mutation(\r\n    $username: String!\r\n    $email: String!\r\n    $password: String!\r\n    $confirmPassword: String!\r\n  ) {\r\n    register(\r\n      username: $username\r\n      email: $email\r\n      password: $password\r\n      confirmPassword: $confirmPassword\r\n    ) {\r\n      username\r\n      email\r\n    }\r\n  }\r\n`;\r\nconst LOGIN_USER = gql`\r\n  query login($username: String!, $password: String!) {\r\n    login(username: $username, password: $password) {\r\n      username\r\n      email\r\n      token\r\n    }\r\n  }\r\n`;\r\nexport {\r\n  AddUser,\r\n  EntryQuery,\r\n  UserQuery,\r\n  FoodQueryS,\r\n  FoodQuery,\r\n  AddFood,\r\n  AddEntry,\r\n  AddQuantity,\r\n  MinusQuantity,\r\n  // EntryQueryS,\r\n  DeleteEntry,\r\n  SetGoals,\r\n  LOGIN_USER,\r\n  REGISTER_USER,\r\n};\r\n","import React, { createContext, useReducer, useContext } from \"react\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nconst AuthStateContext = createContext();\r\nconst AuthDispatchContext = createContext();\r\n\r\nlet user = null;\r\nconst token = localStorage.getItem(\"token\");\r\nif (token) {\r\n  const decodedToken = jwtDecode(token);\r\n  const expiresAt = new Date(decodedToken.exp * 1000);\r\n\r\n  if (new Date() > expiresAt) {\r\n    localStorage.removeItem(\"token\");\r\n    console.log(\"expired\");\r\n  } else {\r\n    user = decodedToken;\r\n  }\r\n} else console.log(\"No token found\");\r\n\r\nconst authReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"LOGIN\":\r\n      localStorage.setItem(\"token\", action.payload.token);\r\n      return {\r\n        ...state,\r\n        user: action.payload,\r\n      };\r\n    case \"LOGOUT\":\r\n      localStorage.removeItem(\"token\");\r\n      return {\r\n        ...state,\r\n        user: null,\r\n      };\r\n    default:\r\n      throw new Error(`Unknown action type: ${action.type}`);\r\n  }\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(authReducer, { user });\r\n\r\n  return (\r\n    <AuthDispatchContext.Provider value={dispatch}>\r\n      <AuthStateContext.Provider value={state}>\r\n        {children}\r\n      </AuthStateContext.Provider>\r\n    </AuthDispatchContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuthState = () => useContext(AuthStateContext);\r\nexport const useAuthDispatch = () => useContext(AuthDispatchContext);\r\n","import React, { Fragment, useState, useContext, useEffect } from \"react\";\r\nimport { graphql } from \"@apollo/client/react/hoc\";\r\nimport * as compose from \"lodash.flowright\";\r\nimport { Query, Mutation, Subscription } from \"@apollo/client/react/components\";\r\nimport { useQuery, useLazyQuery } from \"@apollo/client\";\r\nimport {\r\n  UserQuery,\r\n  EntryQuery,\r\n  FoodQueryS,\r\n  EntryQueryS,\r\n  FoodQuery,\r\n  AddFood,\r\n  AddEntry,\r\n  AddQuantity,\r\n  MinusQuantity,\r\n  DeleteEntry,\r\n} from \"../Food-Query\";\r\nimport { Container, Row, Col, Form, Button } from \"react-bootstrap\";\r\nimport \"./journal.css\";\r\nimport moment from \"moment\";\r\nimport { ItemsContext } from \"./home\";\r\nimport JournalItem from \"./journalItem\";\r\nimport { useAuthDispatch } from \"../context/auth\";\r\nimport UserStats from \"./userStats\";\r\nfunction Journal(props) {\r\n  const [count, setCount] = useContext(ItemsContext);\r\n  const { loading, error, data } = useQuery(EntryQuery, {\r\n    variables: { date: count.format(\"MM-DD-YYYY\") },\r\n    pollInterval: 0.0001,\r\n  });\r\n\r\n  if (loading) return \"Loading...\";\r\n  if (error) {\r\n    return `Error! ${error.message}`;\r\n  }\r\n  // if (loading) return \"Loading...\";\r\n  // if (error) {\r\n  //   return `Error! ${error.message}`;\r\n  // }\r\n\r\n  // if (landingR) return \"Loading...\";\r\n  // if (errorR) {\r\n  //   console.log(errorR);\r\n  // }\r\n\r\n  const breakfast = data.getEntries.filter(\r\n    (food) =>\r\n      food.food_en.type === \"breakfast\" &&\r\n      food.date === count.format(\"MM-DD-YYYY\")\r\n  );\r\n  const breakfast_sum = breakfast.reduce(function (result, item) {\r\n    return result + item.food_en.calories * item.quantity;\r\n  }, 0);\r\n  const lunch = data.getEntries.filter((food) => food.food_en.type === \"lunch\");\r\n  const lunch_sum = lunch.reduce(function (result, item) {\r\n    return result + item.food_en.calories * item.quantity;\r\n  }, 0);\r\n  const dinner = data.getEntries.filter(\r\n    (food) => food.food_en.type === \"dinner\"\r\n  );\r\n  const dinner_sum = dinner.reduce(function (result, item) {\r\n    return result + item.food_en.calories * item.quantity;\r\n  }, 0);\r\n  const total_calories = data.getEntries.reduce(function (result, item) {\r\n    return result + item.food_en.calories * item.quantity;\r\n  }, 0);\r\n  const total_carbs = data.getEntries.reduce(function (result, item) {\r\n    return result + item.food_en.carbohydrates * item.quantity;\r\n  }, 0);\r\n  const total_fat = data.getEntries.reduce(function (result, item) {\r\n    return result + item.food_en.fats * item.quantity;\r\n  }, 0);\r\n  const total_protein = data.getEntries.reduce(function (result, item) {\r\n    return result + item.food_en.proteins * item.quantity;\r\n  }, 0);\r\n  return (\r\n    <Fragment>\r\n      {/* <div className=\"row\">\r\n                <div className=\"col-sm-2 \">total</div>\r\n                <div className=\"col-sm-2 \">{sum(carbohydrates)}</div>\r\n                <div className=\"col-sm-2 \">{sum(fats)}</div>\r\n                <div className=\"col-sm-2 \">{sum(proteins)}</div>\r\n                <div className=\"col-sm-2 \">{sum(calories)}</div>\r\n              </div> */}\r\n      <Row className=\"border-col align-items-center\" style={{ height: \"50px\" }}>\r\n        <Col className=\"\" style={{}}></Col>\r\n        <Col className=\"\" style={{}}>\r\n          carbohydrates\r\n        </Col>\r\n        <Col className=\"\" style={{}}>\r\n          fats\r\n        </Col>\r\n        <Col className=\"\" style={{}}>\r\n          protein\r\n        </Col>\r\n        <Col className=\"\" style={{}}>\r\n          calories\r\n        </Col>\r\n        <Col className=\"\" style={{}}></Col>\r\n      </Row>\r\n      <Query query={UserQuery}>\r\n        {({ loading, error, data }) => {\r\n          if (loading) return <h4>Loading...</h4>;\r\n          if (error) console.log(error);\r\n          console.log(data.getUser);\r\n\r\n          return (\r\n            <div>\r\n              <Row\r\n                className=\"text-white border-col align-items-center\"\r\n                style={{ backgroundColor: \"red\", height: \"50px\" }}\r\n              >\r\n                <Col>daily goal</Col>\r\n\r\n                <Col>\r\n                  {data.getUser.carbohydrates\r\n                    ? data.getUser.carbohydrates\r\n                    : \"--\"}\r\n                </Col>\r\n                <Col>{data.getUser.fats ? data.getUser.fats : \"--\"}</Col>\r\n                <Col>\r\n                  {data.getUser.proteins ? data.getUser.proteins : \"--\"}\r\n                </Col>\r\n                <Col>\r\n                  {data.getUser.daily_calories\r\n                    ? data.getUser.daily_calories\r\n                    : \"--\"}\r\n                </Col>\r\n                <Col></Col>\r\n              </Row>\r\n              <Row\r\n                className=\"text-white border-col align-items-center\"\r\n                style={{ backgroundColor: \"grey\", height: \"50px\" }}\r\n              >\r\n                <Col\r\n                  className={\r\n                    data.getUser.daily_calories > 0 ? \"text-danger\" : \"\"\r\n                  }\r\n                >\r\n                  total\r\n                </Col>\r\n                <Col>{total_carbs}</Col>\r\n                <Col>{total_fat}</Col>\r\n                <Col>{total_protein}</Col>\r\n                <Col>{total_calories}</Col>\r\n                <Col></Col>\r\n              </Row>\r\n            </div>\r\n          );\r\n        }}\r\n      </Query>\r\n      {/* <UserStats /> */}\r\n\r\n      <Row\r\n        className=\"text-white border-col align-items-center\"\r\n        style={{ backgroundColor: \"blue\", height: \"50px\" }}\r\n      >\r\n        <Col>breakfast</Col>\r\n        <Col></Col>\r\n        <Col></Col>\r\n        <Col></Col>\r\n        <Col>{breakfast_sum}</Col>\r\n        <Col></Col>\r\n      </Row>\r\n      {breakfast.map((food) => (\r\n        <JournalItem\r\n          key={food.food_en.id}\r\n          Food={food.food_en}\r\n          count={food.quantity}\r\n          date={count.format(\"MM-DD-YYYY\")}\r\n        />\r\n      ))}\r\n      <Row\r\n        className=\"text-white border-col align-items-center\"\r\n        style={{ backgroundColor: \"blue\", height: \"50px\" }}\r\n      >\r\n        <Col>lunch</Col>\r\n        <Col></Col>\r\n        <Col></Col>\r\n        <Col></Col>\r\n        <Col>{lunch_sum}</Col>\r\n        <Col></Col>\r\n      </Row>\r\n      {lunch.map((food) => (\r\n        <JournalItem\r\n          key={food.food_en.id}\r\n          Food={food.food_en}\r\n          count={food.quantity}\r\n          date={count.format(\"MM-DD-YYYY\")}\r\n        />\r\n      ))}\r\n      <Row\r\n        className=\"text-white border-col align-items-center\"\r\n        style={{ backgroundColor: \"blue\", height: \"50px\" }}\r\n      >\r\n        <Col>dinner</Col>\r\n        <Col></Col>\r\n        <Col></Col>\r\n        <Col></Col>\r\n        <Col>{dinner_sum}</Col>\r\n        <Col></Col>\r\n      </Row>\r\n      {dinner.map((food) => (\r\n        <JournalItem\r\n          key={food.food_en.id}\r\n          Food={food.food_en}\r\n          count={food.quantity}\r\n          date={count.format(\"MM-DD-YYYY\")}\r\n        />\r\n      ))}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default Journal;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { Row, Col, Form, Button } from \"react-bootstrap\";\r\nimport { useForm } from \"../util/hooks\";\r\n// import Button from \"react-bootstrap/Button\";\r\nimport { LOGIN_USER } from \"../Food-Query\";\r\nimport { AuthContext } from \"../context/auth\";\r\nimport { NavHashLink as NavLink } from \"react-router-hash-link\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { useAuthDispatch } from \"../context/auth\";\r\n\r\nexport default function Register(props) {\r\n  const [variables, setVariables] = useState({\r\n    username: \"\",\r\n    password: \"\",\r\n  });\r\n  const [errors, setErrors] = useState({});\r\n  const dispatch = useAuthDispatch();\r\n\r\n  const [loginUser, { loading }] = useLazyQuery(LOGIN_USER, {\r\n    onError: (err) => {\r\n      console.log(err);\r\n      setErrors(err.graphQLErrors[0].extensions.errors);\r\n    },\r\n    onCompleted(data) {\r\n      console.log(data);\r\n      dispatch({ type: \"LOGIN\", payload: data.login });\r\n\r\n      props.history.push(\"/\");\r\n    },\r\n  });\r\n\r\n  const submitLoginForm = (e) => {\r\n    e.preventDefault();\r\n\r\n    loginUser({ variables });\r\n  };\r\n\r\n  return (\r\n    <Row className=\"bg-white py-5 justify-content-center\">\r\n      <Col sm={8} md={6} lg={4}>\r\n        <h1 className=\"text-center\">Login</h1>\r\n        <Form onSubmit={submitLoginForm}>\r\n          <Form.Group>\r\n            <Form.Label className={errors.username && \"text-danger\"}>\r\n              {errors.username ?? \"Username\"}\r\n            </Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              value={variables.username}\r\n              className={errors.username && \"is-invalid\"}\r\n              onChange={(e) =>\r\n                setVariables({ ...variables, username: e.target.value })\r\n              }\r\n            />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label className={errors.password && \"text-danger\"}>\r\n              {errors.password ?? \"Password\"}\r\n            </Form.Label>\r\n            <Form.Control\r\n              type=\"password\"\r\n              value={variables.password}\r\n              className={errors.password && \"is-invalid\"}\r\n              onChange={(e) =>\r\n                setVariables({ ...variables, password: e.target.value })\r\n              }\r\n            />\r\n          </Form.Group>\r\n          <div className=\"text-center\">\r\n            <Button variant=\"success\" type=\"submit\" disabled={loading}>\r\n              {loading ? \"loading..\" : \"Login\"}\r\n            </Button>\r\n            <br />\r\n            <small>\r\n              Don't have an account? <NavLink to=\"/register\">Register</NavLink>\r\n            </small>\r\n          </div>\r\n        </Form>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Row, Col, Form, Button } from \"react-bootstrap\";\r\nimport { REGISTER_USER } from \"../Food-Query\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { NavHashLink as NavLink } from \"react-router-hash-link\";\r\n\r\nexport default function Register(props) {\r\n  const [variables, setVariables] = useState({\r\n    email: \"\",\r\n    username: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const [registerUser, { loading }] = useMutation(REGISTER_USER, {\r\n    update: (_, __) => props.history.push(\"/login\"),\r\n    onError: (err) => setErrors(err.graphQLErrors[0].extensions.errors),\r\n  });\r\n\r\n  const submitRegisterForm = (e) => {\r\n    e.preventDefault();\r\n\r\n    registerUser({ variables });\r\n  };\r\n\r\n  return (\r\n    <Row className=\"bg-white py-5 justify-content-center\">\r\n      <Col sm={8} md={6} lg={4}>\r\n        <h1 className=\"text-center\">Register</h1>\r\n        <Form onSubmit={submitRegisterForm}>\r\n          <Form.Group>\r\n            <Form.Label className={errors.email && \"text-danger\"}>\r\n              {errors.email ?? \"Email address\"}\r\n            </Form.Label>\r\n            <Form.Control\r\n              type=\"email\"\r\n              value={variables.email}\r\n              className={errors.email && \"is-invalid\"}\r\n              onChange={(e) =>\r\n                setVariables({ ...variables, email: e.target.value })\r\n              }\r\n            />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label className={errors.username && \"text-danger\"}>\r\n              {errors.username ?? \"Username\"}\r\n            </Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              value={variables.username}\r\n              className={errors.username && \"is-invalid\"}\r\n              onChange={(e) =>\r\n                setVariables({ ...variables, username: e.target.value })\r\n              }\r\n            />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label className={errors.password && \"text-danger\"}>\r\n              {errors.password ?? \"Password\"}\r\n            </Form.Label>\r\n            <Form.Control\r\n              type=\"password\"\r\n              value={variables.password}\r\n              className={errors.password && \"is-invalid\"}\r\n              onChange={(e) =>\r\n                setVariables({ ...variables, password: e.target.value })\r\n              }\r\n            />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label className={errors.confirmPassword && \"text-danger\"}>\r\n              {errors.confirmPassword ?? \"Confirm password\"}\r\n            </Form.Label>\r\n            <Form.Control\r\n              type=\"password\"\r\n              value={variables.confirmPassword}\r\n              className={errors.confirmPassword && \"is-invalid\"}\r\n              onChange={(e) =>\r\n                setVariables({\r\n                  ...variables,\r\n                  confirmPassword: e.target.value,\r\n                })\r\n              }\r\n            />\r\n          </Form.Group>\r\n          <div className=\"text-center\">\r\n            <Button variant=\"success\" type=\"submit\" disabled={loading}>\r\n              {loading ? \"loading..\" : \"Register\"}\r\n            </Button>\r\n            <br />\r\n            <small>\r\n              Already have an account? <NavLink to=\"/login\">Login</NavLink>\r\n            </small>\r\n          </div>\r\n        </Form>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { useQuery, useLazyQuery } from \"@apollo/client\";\r\nimport * as compose from \"lodash.flowright\";\r\nimport { Query, Mutation, Subscription } from \"@apollo/client/react/components\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport { EntryQuery, FoodQuery, UserQuery } from \"../Food-Query\";\r\nimport FoodItem from \"./foodItem\";\r\nimport moment from \"moment\";\r\nimport Example from \"./button\";\r\nimport Journal from \"./journal\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// import { route } from \"../../server/src/routes/api/auth\";\r\n// import useScript from \"./components/useScript\";\r\nimport \"./home.css\";\r\nimport { Container, Row, Col, Form, Button } from \"react-bootstrap\";\r\nimport { useAuthDispatch } from \"../context/auth\";\r\n\r\nimport Login from \"./login\";\r\nimport Header from \"./Header\";\r\nimport Register from \"./register\";\r\nexport const ItemsContext = React.createContext();\r\nexport const JournalContext = React.createContext();\r\nfunction Home({ history }) {\r\n  const dispatch = useAuthDispatch();\r\n  const logout = () => {\r\n    dispatch({ type: \"LOGOUT\" });\r\n    history.push(\"/login\");\r\n  };\r\n  //   const [user, setUser] = useState();\r\n\r\n  //   useEffect(() => {\r\n  //     const from = window.prompt(\"username\");\r\n  //     from && setUser({ from });\r\n  //   }, []);\r\n  // const { loading, error, data } = useQuery(EntryQuery, {\r\n  //   pollInterval: 0.0001,\r\n  // });\r\n  // console.log(data);\r\n  // const [current, setCurrent] = useState(\r\n  //   data.getEntries.map((entry) => entry.food_en)\r\n  // );\r\n  // useEffect(() => {\r\n  //   if (loading === false && data) {\r\n  //     const newarray = data.getEntries.map((entry) => entry.food_en);\r\n  //     console.log(newarray);\r\n  //     setCurrent(newarray);\r\n  //   }\r\n  // }, [loading, data]);\r\n\r\n  const [count, setCount] = useState(moment());\r\n  function handleChange(newValue) {\r\n    setCount(newValue);\r\n  }\r\n  // add usernmae as paramter\r\n\r\n  const { loading, error, data } = useQuery(EntryQuery, {\r\n    variables: { date: count.format(\"MM-DD-YYYY\") },\r\n    pollInterval: 0.0001,\r\n  });\r\n\r\n  if (loading) return null;\r\n  if (error) {\r\n    return `Error! ${error}`;\r\n  }\r\n  const newarray = data.getEntries.map((entry) => entry.food_en.food_name);\r\n\r\n  return (\r\n    //refetch\r\n\r\n    <div className=\"App\">\r\n      <Row className=\"bg-white justify-content-around mb-1\">\r\n        <Link to=\"/login\">\r\n          <Button variant=\"link\">Login</Button>\r\n        </Link>\r\n        <Link to=\"/register\">\r\n          <Button variant=\"link\">Register</Button>\r\n        </Link>\r\n        <Button variant=\"link\" onClick={logout}>\r\n          Logout\r\n        </Button>\r\n      </Row>\r\n      <ItemsContext.Provider value={[count, setCount]}>\r\n        <Example />\r\n        <Journal />\r\n      </ItemsContext.Provider>\r\n      {/* <Query query={EntryQuery}>\r\n        {({ loading, error, data }) => {\r\n          if (loading) return <h4>Loading...</h4>;\r\n          if (error) console.log(error);\r\n\r\n          return (\r\n            <Fragment>\r\n              {data.getEntries.map((food) => (\r\n                <FoodItem key={food.id} Food={food.food_en} />\r\n              ))}\r\n            </Fragment>\r\n          );\r\n        }}\r\n      </Query> */}\r\n      <Query query={FoodQuery} pollInterval={0.0001}>\r\n        {({ loading, error, data }) => {\r\n          if (loading) return <h4>Loading...</h4>;\r\n          if (error) console.log(error);\r\n          console.log(data);\r\n\r\n          const breakfast = data.getFoods.filter(\r\n            (food) =>\r\n              food.type === \"breakfast\" && !newarray.includes(food.food_name)\r\n          );\r\n          // const breakfast_sum = breakfast.reduce(function (result, item) {\r\n          //   return result + item.calories;\r\n          // }, 0);\r\n          const lunch = data.getFoods.filter(\r\n            (food) =>\r\n              food.type === \"lunch\" && !newarray.includes(food.food_name)\r\n          );\r\n          // const lunch_sum = lunch.reduce(function (result, item) {\r\n          //   return result + item.calories;\r\n          // }, 0);\r\n          const dinner = data.getFoods.filter(\r\n            (food) =>\r\n              food.type === \"dinner\" && !newarray.includes(food.food_name)\r\n          );\r\n          // const dinner_sum = dinner.reduce(function (result, item) {\r\n          //   return result + item.calories;\r\n          // }, 0);\r\n          // const total_calories = data.getFoods.reduce(function (result, item) {\r\n          //   return result + item.calories;\r\n          // }, 0);\r\n          // const total_carbs = data.getFoods.reduce(function (result, item) {\r\n          //   return result + item.carbohydrates;\r\n          // }, 0);\r\n          // const total_fat = data.getFoods.reduce(function (result, item) {\r\n          //   return result + item.fats;\r\n          // }, 0);\r\n          // const total_protein = data.getFoods.reduce(function (result, item) {\r\n          //   return result + item.proteins;\r\n          // }, 0);\r\n          // function sum(type) {\r\n          //   const total = data.getFoods.reduce(function (result, item) {\r\n          //     return result + item[type];\r\n          //   }, 0);\r\n          //   return total;\r\n          // }\r\n\r\n          return (\r\n            <Fragment>\r\n              {/* <div className=\"row\">\r\n                <div className=\"col-sm-2 \">total</div>\r\n                <div className=\"col-sm-2 \">{sum(carbohydrates)}</div>\r\n                <div className=\"col-sm-2 \">{sum(fats)}</div>\r\n                <div className=\"col-sm-2 \">{sum(proteins)}</div>\r\n                <div className=\"col-sm-2 \">{sum(calories)}</div>\r\n              </div> */}\r\n              {/* <div className=\"row\">\r\n                <div className=\"col-sm-2 \"></div>\r\n                <div className=\"col-sm-2 \">carbohydrates</div>\r\n                <div className=\"col-sm-2 \">fats</div>\r\n                <div className=\"col-sm-2 \">proteins</div>\r\n                <div className=\"col-sm-2 \">calories</div>\r\n              </div>\r\n              <div\r\n                className=\"row text-white\"\r\n                style={{ backgroundColor: \"grey\" }}\r\n              >\r\n                <div className=\"col-sm-2\">total</div>\r\n                <div className=\"col-sm-2 \">{total_carbs}</div>\r\n                <div className=\"col-sm-2 \">{total_fat}</div>\r\n                <div className=\"col-sm-2 \">{total_protein}</div>\r\n                <div className=\"col-sm-2\">{total_calories}</div>\r\n              </div>\r\n              <div\r\n                className=\"row text-white\"\r\n                style={{ backgroundColor: \"blue\" }}\r\n              >\r\n                <div className=\"col-sm-2\">breakfast</div>\r\n                <div className=\"col-sm-2 \"></div>\r\n                <div className=\"col-sm-2 \"></div>\r\n                <div className=\"col-sm-2 \"></div>\r\n                <div className=\"col-sm-2\">{breakfast_sum}</div>\r\n              </div> */}\r\n              <Row\r\n                className=\"text-white text-center border-col align-items-center\"\r\n                style={{\r\n                  backgroundColor: \"green\",\r\n                  height: \"50px\",\r\n                }}\r\n              >\r\n                <Col>Today's Menu</Col>\r\n              </Row>\r\n              <Row\r\n                className=\"text-white border-col align-items-center\"\r\n                style={{ backgroundColor: \"blue\", height: \"50px\" }}\r\n              >\r\n                <Col>breakfast</Col>\r\n                <Col></Col>\r\n                <Col></Col>\r\n                <Col></Col>\r\n                <Col></Col>\r\n                <Col></Col>\r\n              </Row>\r\n\r\n              {breakfast.map((food) => (\r\n                <FoodItem\r\n                  key={food.id}\r\n                  Food={food}\r\n                  date={count.format(\"MM-DD-YYYY\")}\r\n                />\r\n              ))}\r\n              {/* <div\r\n                className=\"row text-white\"\r\n                style={{ backgroundColor: \"blue\" }}\r\n              >\r\n                <div className=\"col-sm-2\">lunch</div>\r\n                <div className=\"col-sm-2 \"></div>\r\n                <div className=\"col-sm-2 \"></div>\r\n                <div className=\"col-sm-2 \"></div>\r\n                <div className=\"col-sm-2\">{lunch_sum}</div>\r\n              </div> */}\r\n              <Row\r\n                className=\"text-white border-col align-items-center\"\r\n                style={{ backgroundColor: \"blue\", height: \"50px\" }}\r\n              >\r\n                <Col>lunch</Col>\r\n                <Col></Col>\r\n                <Col></Col>\r\n                <Col></Col>\r\n                <Col></Col>\r\n                <Col></Col>\r\n              </Row>\r\n              {lunch.map((food) => (\r\n                <FoodItem\r\n                  key={food.id}\r\n                  Food={food}\r\n                  date={count.format(\"MM-DD-YYYY\")}\r\n                />\r\n              ))}\r\n              {/* <div\r\n                className=\"row text-white\"\r\n                style={{ backgroundColor: \"blue\" }}\r\n              >\r\n                <div className=\"col-sm-2\">dinner</div>\r\n                <div className=\"col-sm-2 \"></div>\r\n                <div className=\"col-sm-2 \"></div>\r\n                <div className=\"col-sm-2 \"></div>\r\n                <div className=\"col-sm-2\">{dinner_sum}</div>\r\n              </div> */}\r\n              <Row\r\n                className=\"text-white border-col align-items-center\"\r\n                style={{ backgroundColor: \"blue\", height: \"50px\" }}\r\n              >\r\n                <Col>dinner</Col>\r\n                <Col></Col>\r\n                <Col></Col>\r\n                <Col></Col>\r\n                <Col></Col>\r\n                <Col></Col>\r\n              </Row>\r\n              {dinner.map((food) => (\r\n                <FoodItem\r\n                  key={food.id}\r\n                  Food={food}\r\n                  date={count.format(\"MM-DD-YYYY\")}\r\n                />\r\n              ))}\r\n            </Fragment>\r\n          );\r\n        }}\r\n      </Query>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, { Fragment, useState, useContext, useEffect } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { ItemsContext } from \"./home\";\r\nimport moment from \"moment\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport Calendar from \"react-calendar\";\r\nimport Popup from \"reactjs-popup\";\r\nimport InfiniteCalendar from \"react-infinite-calendar\";\r\nimport \"react-infinite-calendar/styles.css\"; // Make sure to import the default stylesheet\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowLeft, faArrowRight } from \"@fortawesome/free-solid-svg-icons\";\r\nfunction Example(props) {\r\n  const [count, setCount] = useContext(ItemsContext);\r\n  console.log(count);\r\n  // useEffect(() => {\r\n  //   // Update the document title using the browser API\r\n  //   setCount(count);\r\n  // });\r\n  function increment() {\r\n    // Here, we invoke the callback with the new value\r\n    setCount(moment(count).subtract(-1, \"days\"));\r\n    console.log(count.format(\"MM-DD-YYYY\"));\r\n  }\r\n  function decrement() {\r\n    // Here, we invoke the callback with the new value\r\n    setCount(moment(count).subtract(1, \"days\"));\r\n    console.log(count.format(\"MM-DD-YYYY\"));\r\n  }\r\n  function pop() {\r\n    return <Calendar />;\r\n  }\r\n  return (\r\n    <div style={{ marginBottom: \"30px\" }}>\r\n      <ButtonGroup aria-label=\"Basic example\">\r\n        <button\r\n          type=\"button\"\r\n          onClick={decrement}\r\n          className=\"btn btn-primary btn-lg active\"\r\n        >\r\n          <FontAwesomeIcon icon={faArrowLeft} />\r\n        </button>\r\n        {/* <Button onClick={pop} variant=\"primary\" size=\"lg\" active>\r\n        {count.format(\"DD-MM-YYYY\")}\r\n      </Button> */}\r\n        <Popup\r\n          trigger={\r\n            <button type=\"button\" className=\"btn btn-primary btn-lg active\">\r\n              {count.format(\"ddd MM-DD-YYYY\")}\r\n            </button>\r\n          }\r\n          position=\"bottom center\"\r\n        >\r\n          <div>\r\n            <InfiniteCalendar\r\n              onSelect={(date) => setCount(moment(date))}\r\n              width={400}\r\n              height={300}\r\n              disabledDays={[0, 6]}\r\n            />\r\n          </div>\r\n        </Popup>\r\n        <button\r\n          type=\"button\"\r\n          onClick={increment}\r\n          className=\"btn btn-primary btn-lg active\"\r\n        >\r\n          <FontAwesomeIcon icon={faArrowRight} />\r\n        </button>{\" \"}\r\n      </ButtonGroup>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Example;\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nimport { useAuthState } from \"../context/auth\";\r\n\r\nexport default function DynamicRoute(props) {\r\n  const { user } = useAuthState();\r\n\r\n  if (props.authenticated && !user) {\r\n    return <Redirect to=\"/login\" />;\r\n  } else if (props.guest && user) {\r\n    return <Redirect to=\"/\" />;\r\n  } else {\r\n    return <Route component={props.component} {...props} />;\r\n  }\r\n}\r\n","import React, { Fragment, useState, useContext, useEffect } from \"react\";\r\nimport { graphql } from \"@apollo/client/react/hoc\";\r\nimport * as compose from \"lodash.flowright\";\r\nimport { Query, Mutation, Subscription } from \"@apollo/client/react/components\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport { SetGoals, UserQuery } from \"../Food-Query\";\r\nimport { Container, Row, Col, Form, Button, InputGroup } from \"react-bootstrap\";\r\nimport \"./journal.css\";\r\nimport moment from \"moment\";\r\nimport { ItemsContext } from \"./home\";\r\nimport JournalItem from \"./journalItem\";\r\nimport { useAuthDispatch } from \"../context/auth\";\r\nimport * as yup from \"yup\";\r\nimport { Formik } from \"formik\";\r\nconst schema = yup.object({\r\n  age: yup.number().required(),\r\n  sex: yup.string().required(),\r\n  height: yup.number().required(),\r\n  heightTens: yup.number().required(),\r\n  weight: yup.number().required(),\r\n  goal: yup.string().required(),\r\n  activityLevel: yup.string().required(),\r\n});\r\nexport default function SetG(props) {\r\n  var c = null;\r\n  var f = null;\r\n  var p = null;\r\n  var k = null;\r\n  const [stats, setStats] = useState({\r\n    age: null,\r\n    sex: null,\r\n    height: null,\r\n    heightTens: null,\r\n    weight: null,\r\n    goal: null,\r\n    activityLevel: null,\r\n  });\r\n  const formula = (a, s, h, t, w, g, act) => {\r\n    const height = t * 30.48 + h * 2.54;\r\n    const weight = w * 0.453592;\r\n    var calories =\r\n      s === \"male\"\r\n        ? weight * 10 + height * 6.25 - a * 5 + 5\r\n        : weight * 10 + height * 6.25 - a * 5 - 161;\r\n    switch (act) {\r\n      case \"Lightly active (moderate exercise but sedentary job)\":\r\n        calories = Math.round(calories * 1.1);\r\n        break;\r\n      case \"Moderately active (intense exercise but sedentary job)\":\r\n        calories = Math.round(calories * 1.3);\r\n        break;\r\n      case \"Very active (moderate exercise and active job)\":\r\n        calories = Math.round(calories * 1.5);\r\n        break;\r\n      case \"Extra active (intense exercise and active job)\":\r\n        calories = Math.round(calories * 1.7);\r\n        break;\r\n    }\r\n    var carbs = 0;\r\n    var fats = 0;\r\n    var protons = 0;\r\n    switch (g) {\r\n      case \"Fat Loss\":\r\n        if (calories <= 2000) calories = Math.round(0.9 * calories);\r\n        if (calories > 2000) calories = Math.round(0.8 * calories);\r\n        carbs = Math.round((0.4 * calories) / 4);\r\n        protons = Math.round((0.4 * calories) / 4);\r\n        fats = Math.round((0.2 * calories) / 9);\r\n        break;\r\n      case \"Maintenance\":\r\n        carbs = Math.round((0.45 * calories) / 4);\r\n        protons = Math.round((0.3 * calories) / 4);\r\n        fats = Math.round((0.25 * calories) / 9);\r\n        break;\r\n      case \"Get Swole\":\r\n        calories += 500;\r\n        carbs = Math.round((0.45 * calories) / 4);\r\n        protons = Math.round((0.3 * calories) / 4);\r\n        fats = Math.round((0.25 * calories) / 9);\r\n        break;\r\n    }\r\n    console.log(fats);\r\n    console.log(carbs);\r\n    console.log(protons);\r\n    c = carbs;\r\n    f = fats;\r\n    p = protons;\r\n    k = calories;\r\n    // setVariables({\r\n    //   carbs,\r\n    //   fats,\r\n\r\n    //   protein: protons,\r\n    //   kcal: calories,\r\n    // });\r\n  };\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const [setGoal, { loading }] = useMutation(SetGoals, {\r\n    update: (_, __) => props.history.push(\"/\"),\r\n    onError: (err) => setErrors(err.graphQLErrors[0].extensions.errors),\r\n\r\n    refetchQueries: [{ query: UserQuery }],\r\n  });\r\n  const submitGoalForm = (e) => {\r\n    e.preventDefault();\r\n\r\n    setGoal({ variables: { carbs: c, fats: f, protein: p, kcal: k } });\r\n  };\r\n  const calculate = (e) => {\r\n    e.preventDefault();\r\n    formula(\r\n      stats.age,\r\n      stats.sex,\r\n      stats.height,\r\n      stats.heightTens,\r\n      stats.weight,\r\n      stats.goal,\r\n      stats.activityLevel\r\n    );\r\n    setGoal({ variables: { carbs: c, fats: f, protein: p, kcal: k } });\r\n  };\r\n  return (\r\n    <Row className=\"bg-white py-5 justify-content-center\">\r\n      <Form noValidate onSubmit={calculate}>\r\n        <Form.Group>\r\n          <Form.Label>Age</Form.Label>\r\n          <Form.Control\r\n            type=\"number\"\r\n            name=\"age\"\r\n            value={stats.age}\r\n            onChange={(e) =>\r\n              setStats({ ...stats, age: parseInt(e.target.value) })\r\n            }\r\n            isInvalid={!!errors.age}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Please provide an age.\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>Gender</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            name=\"sex\"\r\n            as=\"select\"\r\n            value={stats.sex}\r\n            onChange={(e) => setStats({ ...stats, sex: e.target.value })}\r\n            isInvalid={!!errors.sex}\r\n          >\r\n            <option value=\"\" disabled selected>\r\n              Select One\r\n            </option>\r\n\r\n            <option>male</option>\r\n            <option>female</option>\r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.sex}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>Weight</Form.Label>\r\n          <Form.Control\r\n            type=\"number\"\r\n            name=\"weight\"\r\n            placeholder=\"Pounds\"\r\n            value={stats.weight}\r\n            onChange={(e) =>\r\n              setStats({ ...stats, weight: parseInt(e.target.value) })\r\n            }\r\n            isInvalid={!!errors.weight}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.weight}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Form.Row>\r\n          <Form.Group as={Col} md=\"4\">\r\n            <Form.Label>Height</Form.Label>\r\n            <Form.Control\r\n              type=\"number\"\r\n              name=\"height\"\r\n              placeholder=\"feet\"\r\n              value={stats.height}\r\n              onChange={(e) =>\r\n                setStats({ ...stats, height: parseInt(e.target.value) })\r\n              }\r\n              isInvalid={!!errors.height}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.height}\r\n            </Form.Control.Feedback>\r\n          </Form.Group>\r\n          <Form.Group as={Col} md=\"4\">\r\n            <Form.Label style={{ color: \"white\" }}>0</Form.Label>\r\n\r\n            <Form.Control\r\n              type=\"number\"\r\n              name=\"heightTens\"\r\n              placeholder=\"inches\"\r\n              value={stats.heightTens}\r\n              onChange={(e) =>\r\n                setStats({\r\n                  ...stats,\r\n                  heightTens: parseInt(e.target.value),\r\n                })\r\n              }\r\n              isInvalid={!!errors.heightTens}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.heightTens}\r\n            </Form.Control.Feedback>\r\n          </Form.Group>\r\n        </Form.Row>\r\n\r\n        <Form.Group md=\"4\">\r\n          <Form.Label>Goal</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            name=\"goal\"\r\n            as=\"select\"\r\n            value={stats.goal}\r\n            onChange={(e) => setStats({ ...stats, goal: e.target.value })}\r\n            isInvalid={!!errors.goal}\r\n          >\r\n            <option value=\"\" disabled selected>\r\n              Select One\r\n            </option>\r\n\r\n            <option>Fat Loss</option>\r\n            <option>Maintenance</option>\r\n            <option>Get Swole</option>\r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.goal}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Form.Group md=\"4\">\r\n          <Form.Label>Activity Level</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            name=\"activityLevel\"\r\n            as=\"select\"\r\n            value={stats.activityLevel}\r\n            onChange={(e) =>\r\n              setStats({ ...stats, activityLevel: e.target.value })\r\n            }\r\n            isInvalid={!!errors.activityLevel}\r\n          >\r\n            <option value=\"\" disabled selected>\r\n              Select One\r\n            </option>\r\n\r\n            <option>\r\n              Lightly active (moderate exercise but sedentary job)\r\n            </option>\r\n            <option>\r\n              Moderately active (intense exercise but sedentary job)\r\n            </option>\r\n            <option>Very active (moderate exercise and active job)</option>\r\n            <option>Extra active (intense exercise and active job)</option>\r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.activityLevel}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Button type=\"submit\">Submit form</Button>\r\n      </Form>\r\n      )\r\n    </Row>\r\n  );\r\n}\r\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport { graphql } from \"@apollo/client/react/hoc\";\nimport { useQuery } from \"@apollo/client\";\nimport * as compose from \"lodash.flowright\";\nimport { Query, Mutation, Subscription } from \"@apollo/client/react/components\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { EntryQuery, FoodQuery, UserQuery } from \"./Food-Query\";\nimport FoodItem from \"./components/foodItem\";\nimport moment from \"moment\";\nimport Example from \"./components/button\";\nimport Journal from \"./components/journal\";\n// import { route } from \"../../server/src/routes/api/auth\";\n// import useScript from \"./components/useScript\";\nimport Login from \"./components/login\";\nimport Header from \"./components/Header\";\nimport Register from \"./components/register\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Home from \"./components/home\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { AuthProvider } from \"./context/auth\";\nimport AuthRoute from \"./util/AuthRoute\";\nimport { Container } from \"react-bootstrap\";\nimport Chart from \"./components/chart\";\nimport DynamicRoute from \"./util/DynamicRoute\";\nimport SetG from \"./components/setGoal\";\nexport const ItemsContext = React.createContext();\nexport const JournalContext = React.createContext();\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <BrowserRouter>\n        <Container className=\"pt-5\">\n          <Switch>\n            <DynamicRoute exact path=\"/\" component={Login} authenticated />\n            <DynamicRoute path=\"/register\" component={Register} guest />\n            <DynamicRoute path=\"/login\" component={Login} guest />\n            <Route path=\"/set\" component={SetG} />\n          </Switch>\n        </Container>\n      </BrowserRouter>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n  ApolloClient,\r\n  split,\r\n  createHttpLink,\r\n  ApolloProvider,\r\n} from \"@apollo/client\";\r\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\r\nimport { getMainDefinition } from \"@apollo/client/utilities\";\r\nimport { InMemoryCache } from \"@apollo/client/cache\";\r\nimport { setContext } from \"@apollo/client/link/context\";\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: \"https://calorie-tracker-backend.herokuapp.com/\",\r\n});\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const token = localStorage.getItem(\"token\");\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authentication: token ? `Bearer ${token}` : \"\",\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <App />\r\n  </ApolloProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}